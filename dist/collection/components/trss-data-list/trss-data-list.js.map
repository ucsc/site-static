{"version":3,"file":"trss-data-list.js","sourceRoot":"","sources":["../../../src/components/trss-data-list/trss-data-list.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAOlD,MAAM,OAAO,YAAY;;IAuCvB,aAAQ,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;;iBA9BD,CAAC;kBAKC,KAAK;;EAE/B;;KAEG;EAEH,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAC,gBAAgB;MAC1B,eAAQ;MACR,cACG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE,EAAE,CAAC,CAChE;QACE,UAAI,KAAK,EAAC,QAAQ;UAChB,SAAG,IAAI,EAAE,IAAI,CAAC,GAAG,IAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAK,CACrD;QACL,YAAM,KAAK,EAAC,MAAM,IAAE,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAQ;QAC7D,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAG,KAAK,EAAC,aAAa,IAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAK,CAAC,CAAC,CAAC,EAAE,CAC/F,CACN,CAAC,CACC,CACA,CACR,CAAC;EACJ,CAAC;EAID,KAAK,CAAC,mBAAmB;IACvB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,IAAI,EAAE;MACpG,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kDAAkD,EAAE,EAAE,CAAC,CAAC;MAC1I,cAAc,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;MAC/E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;KACvE;SAAM;MACL,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;KACvE;EACH,CAAC;EAEO,cAAc,CAAC,IAAI;IACzB,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAClD,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,MAAM,KAAK,GAAG,sCAAsC,CAAC;IACrD,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACjD,OAAO,MAAM,CAAC;EAChB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Prop } from '@stencil/core';\nimport { friendly_date } from '../../utils/utils';\n\n@Component({\n  tag: 'trss-data-list',\n  styleUrl: 'trss-data-list.scss',\n  shadow: false,\n})\nexport class TrssDataList {\n  /**\n   * The JSON source for the content list in this component.\n   */\n  @Prop() source: string;\n\n  /**\n   * Limit the number of items displayed.\n   */\n  @Prop() limit: number = 5;\n\n  /**\n   * Whether or not to display the teaser text.\n   */\n  @Prop() teaser: boolean = false;\n\n  /**\n   * @slot default - Content that appears above the list. We recommend a header and description.\n   */\n\n  render() {\n    return (\n      <Host class=\"trss-data-list\">\n        <slot />\n        <ul>\n          {this.listData.items.slice(0, this.limit).map((item: any = {}) => (\n            <li>\n              <h3 class=\"header\">\n                <a href={item.url}>{this.getEncodedText(item.title)}</a>\n              </h3>\n              <span class=\"meta\">{friendly_date(item.date_published)}</span>\n              {item.summary && this.teaser ? <p class=\"description\">{this.getEncodedText(item.summary)}</p> : ''}\n            </li>\n          ))}\n        </ul>\n      </Host>\n    );\n  }\n\n  listData = { items: [] };\n\n  async componentWillRender() {\n    if (!sessionStorage.getItem('trssFetchedData') || sessionStorage.getItem('trssFetchedData') === '{}') {\n      let getApi = await fetch(this.source, { method: 'GET', headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' } });\n      sessionStorage.setItem('trssFetchedData', JSON.stringify(await getApi.json()));\n      this.listData = JSON.parse(sessionStorage.getItem('trssFetchedData'));\n    } else {\n      this.listData = JSON.parse(sessionStorage.getItem('trssFetchedData'));\n    }\n  }\n\n  private getEncodedText(text): string {\n    var textArea = document.createElement('textarea');\n    textArea.innerHTML = text;\n    const regex = /<script[\\d\\D]*?>[\\d\\D]*?<\\/script>/gm;\n    const result = textArea.value.replace(regex, '');\n    return result;\n  }\n}\n"]}